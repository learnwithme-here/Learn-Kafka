
## Genereate cluster UUID ##
KAFKA_CLUSTER_ID="$(bin/kafka-storage.sh random-uuid)"

## Format Log Directories ##
bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/controller1.properties
bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/controller2.properties
bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/controller3.properties


bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/broker1.properties
bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/broker2.properties
bin/kafka-storage.sh format  -t $KAFKA_CLUSTER_ID -c config/broker3.properties

## Start Controllers and brokers ##

nohup bin/kafka-server-start.sh config/controller1.properties > controller1.nohup.log &
nohup bin/kafka-server-start.sh config/controller2.properties > controller2.nohup.log &
nohup bin/kafka-server-start.sh config/controller3.properties > controller3.nohup.log &

nohup bin/kafka-server-start.sh config/broker1.properties > broker1.nohup.log &
nohup bin/kafka-server-start.sh config/broker2.properties > broker2.nohup.log &
nohup bin/kafka-server-start.sh config/broker3.properties > broker3.nohup.log &

## Topic Create and describe ##
bin/kafka-topics.sh --create --topic test1 --partitions 9 --replication-factor 3 --bootstrap-server localhost:9092
bin/kafka-topics.sh --describe --topic test1 --bootstrap-server localhost:9092


## Producer ##
bin/kafka-console-producer.sh --topic test1 --bootstrap-server localhost:9092

## Consumer ##
bin/kafka-console-consumer.sh --topic test1 --from-beginning --bootstrap-server localhost:9092

## Starting Kafka Connect Distributed
bin/connect-distributed.sh config/connect-distributed.properties

##Kafka UI
$JAVA_HOME/bin/java -Dspring.config.additional-location=application.yaml -Dserver.port=8080 --add-opens java.rmi/javax.rm
i.ssl=ALL-UNNAMED -jar kafka-ui-api-v0.7.2.jar


